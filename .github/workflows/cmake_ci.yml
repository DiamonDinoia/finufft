name: cmake ci linux macos windows

on: [push, pull_request]

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Generate matrix
        id: generate_matrix
        run: |
          MATRIX=$(python3 ${{ github.workspace }}/.github/workflows/generate_cmake_matrix.py)
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  pip-requirements:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          cache : 'pip'
          python-version: '3.10'
      - name: Generate requirements.txt
        run: |
          pip install --upgrade pip
          pip install pip-tools
          pip-compile --all-build-deps python/finufft/pyproject.toml -o requirements.txt
          echo pytest >> requirements.txt
          sed -i -E 's/(==|>=|<=|>|<|~=|!=).*//' requirements.txt
          cat requirements.txt
      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements
          path: requirements.txt

  cache:
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: create cache directory
        shell: bash
        run: |
          mkdir -p "cpm"
      - name: Check if cache exists
        id: cache
        uses: actions/cache@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          enableCrossOsArchive: true
          path: cpm
      - name: Setup Cpp
        if: steps.cache.outputs.cache-hit != 'true'
        uses: aminya/setup-cpp@v1
        with:
          cmake: 3.31.6
      - name: Download dependencies in cache linux
        if: steps.cache.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          cmake -S . -B ./build -DCPM_SOURCE_CACHE="cpm"
          rm -rf build
          cmake -S . -B ./build -DFINUFFT_USE_DUCC0=ON -DCPM_SOURCE_CACHE="cpm"
        env:
          CPM_SOURCE_CACHE: cpm
      - name: Download dependencies in cache windows
        if: steps.cache.outputs.cache-hit != 'true' && runner.os != 'Linux'
        run: |
          cmake -S . -B build -DCPM_SOURCE_CACHE="cpm"
          rm build -r -force
          cmake -S . -B build -DFINUFFT_USE_DUCC0=ON -DCPM_SOURCE_CACHE="cpm"
        env:
          CPM_SOURCE_CACHE: cpm
      - name: Cache dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          enableCrossOsArchive: true
          path: cpm

  cmake-ci:
    runs-on: ${{ matrix.os }}
    needs: [prepare, cache, pip-requirements]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Cache
        uses: actions/cache/restore@v4
        with:
          key: cpm-cache-00-${{ runner.os == 'windows' && 'windows-' || '' }}${{ hashFiles('**/CMakeLists.txt', 'cmake/**') }}
          enableCrossOsArchive: true
          path: cpm

      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements

      # Manual sccache setup (action + env)
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Set caching env vars
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "SCCACHE_GHA_VERSION=0" >> $GITHUB_ENV

      - name: Set up sccache on Windows
        if: runner.os == 'Windows'
        run: Add-Content -Path $env:GITHUB_ENV -Value "SCCACHE_GHA_ENABLED=true"

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.toolchain }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: 3.31.6
          ninja: true
          vcpkg: false
          cppcheck: false
          clangtidy: false
          # sccache intentionally NOT enabled here; using manual sccache action above

      - name: Set min macOS version and install fftw
        if: runner.os == 'macOS'
        run: |
          brew install fftw libomp
          # Make libomp visible to the linker & compiler
          echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          # (Optional) Also help CMake find brew packages
          echo "CMAKE_PREFIX_PATH=$(brew --prefix):$(brew --prefix libomp)" >> $GITHUB_ENV

      - name: Install fftw (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y libfftw3-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install Python requirements
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Build and test configurations
        shell: bash
        env:
          CPM_SOURCE_CACHE: cpm
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-12' && '12' || matrix.os == 'macos-13' && '13' || '' }}
        run: |
          configs=(
            "build_type=Release ducc_fft=On"
            "build_type=Debug ducc_fft=Off"
          )
          if [[ "${{ matrix.toolchain }}" == "msvc" ]]; then
            arch_flags=("/arch:AVX2" "/arch:SSE2" "native")
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            arch_flags=("-march=x86-64" "-march=x86-64-v2" "-march=x86-64-v3" "-march=native")
          else
            arch_flags=("native")
          fi
          for arch in "${arch_flags[@]}"; do
            arch_dir=$(echo "$arch" | tr -c 'A-Za-z0-9' '_')
            for cfg in "${configs[@]}"; do
              eval "$cfg"
              build_dir="build_${build_type}_${ducc_fft}_${arch_dir}"
              cmake -S . -B "$build_dir" -G Ninja \
                -DCPM_SOURCE_CACHE="cpm" \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                -DCMAKE_BUILD_TYPE=$build_type \
                -DFINUFFT_ARCH_FLAGS=$arch \
                -DFINUFFT_USE_DUCC0=$ducc_fft \
                -DFINUFFT_BUILD_TESTS=ON \
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5
              cmake --build "$build_dir" --config "$build_type"
              (cd "$build_dir" && ctest -C "$build_type" --output-on-failure)

              # Build & test Python package with matching CMake options
              python3 -m pip install \
                --verbose \
                -C cmake.define.CMAKE_BUILD_TYPE=$build_type \
                -C cmake.define.FINUFFT_ARCH_FLAGS=$arch \
                -C cmake.define.FINUFFT_USE_DUCC0=$ducc_fft \
                -C cmake.define.CPM_SOURCE_CACHE=cpm \
                -C cmake.define.CMAKE_CXX_COMPILER_LAUNCHER=sccache \
                -C cmake.define.CMAKE_C_COMPILER_LAUNCHER=sccache \
                -C cmake.define.CMAKE_GENERATOR=Ninja \
                -C cmake.define.CMAKE_GENERATOR_PLATFORM= \
                -C cmake.define.CMAKE_POLICY_VERSION_MINIMUM=3.5 \
                python/finufft

              python3 -m pytest python/finufft/test
              rm -rf "$build_dir"
            done
          done

  cleanup:
    runs-on: ubuntu-22.04
    needs: cmake-ci
    steps:
      - name: Artifact cleanup
        uses: geekyeggo/delete-artifact@v5
        with:
          name: requirements
