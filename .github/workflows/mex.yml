name: Build MATLAB MEX

on: [push, pull_request]

jobs:
  mex:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: windows-2022
          #         - os: macos-13 # requires MATLAB OpenMP support to work
          - os: macos-14
          - os: macos-15
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup C++ toolchain
        uses: aminya/setup-cpp@v1.7.1
        with:
          cmake: true
          ninja: true
          vcvarsall: true

      - name: Set macOS deployment target and deps
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew update
          brew install fftw libomp
          echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix):$(brew --prefix libomp)" >> $GITHUB_ENV
          ver="${{ matrix.os }}"; ver="${ver#macos-}"
          echo "MACOSX_DEPLOYMENT_TARGET=${ver}.0" >> "$GITHUB_ENV"

      # Install CUDA on non-macOS runners
      - name: Install CUDA Toolkit (non-macOS)
        if: runner.os != 'macOS'
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: '12.4.0'
          method: 'network'
          linux-local-args: '["--toolkit"]'
          log-file-suffix: '${{ matrix.os }}-cuda-install.txt'
          sub-packages: ${{ runner.os == 'Linux' && '["nvcc", "cudart"]' || '["nvcc", "cudart", "cufft", "cufft_dev"]' }}
          non-cuda-sub-packages: ${{ runner.os == 'Linux' && '["libcufft","libcufft-dev"]' || '[]' }}
          use-local-cache: 'false'
          use-github-cache: 'false' # cache currently unreliable

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2024a
          products: Parallel_Computing_Toolbox
          cache: true

      # Keep all MATLAB invocations inside this step so the CI license applies
      - name: Configure, Build, Test, and Package via MATLAB
        uses: matlab-actions/run-command@v2
        with:
          command: |
            % --- Pass through environment variables into MATLAB's process ---
            keys = {'PATH','LDFLAGS','CPPFLAGS','LIBRARY_PATH','DYLD_LIBRARY_PATH','CMAKE_PREFIX_PATH','RUNNER_OS','NUMBER_OF_PROCESSORS'};
            for k = 1:numel(keys), v = getenv(keys{k}); if ~isempty(v), setenv(keys{k}, v); end, end
            % Ensure MATLAB-provided PATH (if any) is visible too
            mr = getenv('MATLAB_ROOT');
            if ~isempty(mr)
              setenv('PATH', [fullfile(mr,'bin') pathsep getenv('PATH')]);
            end

            % --- CUDA flag only on non-macOS ---
            ismacrunner = contains(getenv('RUNNER_OS'), 'macOS');
            if ~ismacrunner
              cudaFlag = ['-DFINUFFT_USE_CUDA=ON ', ...
                          '-DCMAKE_CUDA_ARCHITECTURES=50;60;70;80;89 '];
              % Optional: show nvcc version for debugging (ignore failure)
              try, system('nvcc --version', '-echo'); catch, end
            else
              cudaFlag = '';
            end

            % --- Configure ---
            cfg = [ ...
              'cmake -S . -B build -G Ninja ', ...
              '-DCMAKE_BUILD_TYPE=Release ', ...
              '-DFINUFFT_USE_DUCC0=ON ', ...
              '-DFINUFFT_USE_OPENMP=ON ', ...
              '-DFINUFFT_MATLAB_INSTALL=ON ', ...
              cudaFlag];
            assert(system(cfg, '-echo') == 0, 'CMake configure failed');

            % --- Build ---
            assert(system('cmake --build build --target finufft_mex --parallel', '-echo') == 0, 'Build finufft_mex failed');
            if ~ismacrunner
              assert(system('cmake --build build --target cufinufft_mex --parallel', '-echo') == 0, 'Build cufinufft_mex failed');
            end

            % --- MATLAB tests ---
            addpath(genpath('matlab'));
            addpath(genpath('build'));
            fullmathtest

            % --- Package ---
            assert(system('cmake --build build --target package', '-echo') == 0, 'CPack packaging failed');

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: finufft-matlab-mex-${{ matrix.os }}
          path: |
            build/*.zip
            build/*.tar.gz
          if-no-files-found: error
