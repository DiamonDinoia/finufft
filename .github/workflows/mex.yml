name: Build MATLAB MEX

on: [push, pull_request]

jobs:
  mex:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: windows-2022
          #         - os: macos-13 this requires matlab openmp to work.
          - os: macos-14
          - os: macos-15
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup C++ toolchain
        uses: aminya/setup-cpp@v1.7.1
        with:
          cmake: true
          ninja: true
          vcvarsall: true
      - name: Set macOS deployment target
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install fftw libomp
          echo "LDFLAGS=-L$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix libomp)/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$(brew --prefix):$(brew --prefix libomp)" >> $GITHUB_ENV
          ver="${{ matrix.os }}"; ver="${ver#macos-}"
          echo "MACOSX_DEPLOYMENT_TARGET=${ver}.0" >> "$GITHUB_ENV"

      # Install CUDA on non-macOS runners
      - name: Install CUDA Toolkit (non-macOS)
        if: runner.os != 'macOS'
        uses: Jimver/cuda-toolkit@v0.2.24
        with:
          cuda: '12.4.0'
          method: 'network'
          linux-local-args: '["--toolkit"]'
          log-file-suffix: '${{matrix.os}}-cuda-install.txt'
          sub-packages: ${{runner.os == 'Linux' && '["nvcc", "cudart"]' || '["nvcc", "cudart", "cufft", "cufft_dev"]'}}
          non-cuda-sub-packages: ${{runner.os == 'Linux' && '["libcufft","libcufft-dev"]' || '[]'}}
          use-local-cache: 'false'
          use-github-cache: 'false' #it is not working at the moment https://github.com/Jimver/cuda-toolkit/issues/390

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2024a
          products: Parallel_Computing_Toolbox
          cache: true
      - name: Show mex/mexcuda flags (pure print; no build artifacts)
        uses: matlab-actions/run-command@v2
        with:
          command: |
            addpath(genpath('matlab'));

            cuFile = 'matlab/cufinufft.cu';
            arch   = computer('arch');
            opts   = fullfile(matlabroot, 'toolbox', 'parallel', 'gpu', 'extern', 'src', 'mex', arch, ...
                              ispc * "nvcc_msvcpp2022.xml" + ~ispc * "nvcc_g++.xml");
            if ~exist(opts, 'file')
              % Fallbacks on Windows in case msvcpp2022 variant isn’t present
              if ispc
                cands = { ...
                  fullfile(matlabroot,'toolbox','parallel','gpu','extern','src','mex',arch,'nvcc_msvcpp.xml'), ...
                  fullfile(matlabroot,'toolbox','parallel','gpu','extern','src','mex',arch,'nvcc_g++.xml')};
                for k=1:numel(cands), if exist(cands{k},'file'), opts=cands{k}; break; end, end
              end
            end

            fprintf('--- Using options file: %s ---\n\n', opts);

            % Ensure CUDA is visible on PATH (GitHub runners already set this, but be explicit)
            p = getenv('PATH');
            if isunix
              setenv('PATH', sprintf('%s:%s/bin', p, '/usr/local/cuda-12.4'));
            else
              setenv('PATH', sprintf('%s;%s\\bin', p, 'C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.4'));
            end

            % 1) Print nvcc version (if available)
            try
              [st, outNV] = system('nvcc --version');
              fprintf('--- nvcc --version (status %d) ---\n%s\n', st, outNV);
            catch, end

            % 2) Do a VERBOSE “dry-run” compile: we force nvcc’s own --dryrun so no .o files are created.
            %    We expect the link to fail because objects don’t exist; we catch and ignore that error.
            %    We capture the entire mex output (incl. CMDLINE blocks) and print it *even on failure*.
            try
              fprintf('--- mex verbose + nvcc --dryrun (expect link failure) ---\n');
              out = evalc('mex(''-largeArrayDims'',''-v'',''-f'', opts, cuFile, ''NVCC_FLAGS=--dryrun'')');
              disp(out);
            catch ME
              % Print whatever mex produced up to failure
              if exist('out','var'), disp(out); end
              fprintf('\n[Info] mex call failed as expected due to --dryrun (no objects). Details:\n%s\n', getReport(ME,'extended'));
            end

            % 3) Environment snapshot (helpful for reproducing)
            fprintf('\n--- Environment snapshot ---\n');
            fprintf('PATH=%s\n', getenv('PATH'));
            if isunix, fprintf('LD_LIBRARY_PATH=%s\n', getenv('LD_LIBRARY_PATH')); end
            fprintf('LIBRARY_PATH=%s\n', getenv('LIBRARY_PATH'));
            fprintf('INCLUDE=%s\n', getenv('INCLUDE'));

            % 4) Dump the options XML so defaults/flags are visible in logs
            fprintf('\n--- Contents of %s ---\n', opts);
            try
              disp(fileread(opts));
            catch ME
              fprintf('Could not read options XML: %s\n', ME.message);
            end

            % 5) Best-effort cleanup in case anything was produced
            try
              delete('cufinufft.*.mex*');  % if any mex slipped through (shouldn’t with --dryrun)
            catch, end

            fprintf('\n[Info] mex/mexcuda flags inspection finished (no build artifacts kept).\n');

      - name: Configure & Build
        shell: bash
        run: |
          # Ensure MATLAB is on PATH if provided by setup-matlab
          if [ -n "${MATLAB_ROOT:-}" ]; then export PATH="${MATLAB_ROOT}/bin:${PATH}"; fi

          # Enable CUDA only on non-macOS
          CUDA_FLAG=""
          if [ "${RUNNER_OS}" != "macOS" ]; then
            CUDA_FLAG="-DFINUFFT_USE_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=50;60;70;80;89"
            # Optional: show nvcc version for debugging
            if command -v nvcc >/dev/null 2>&1; then nvcc --version || true; fi
          fi

          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DFINUFFT_USE_DUCC0=ON \
            -DFINUFFT_USE_OPENMP=ON \
            -DFINUFFT_MATLAB_INSTALL=ON \
            ${CUDA_FLAG}

          cmake --build build --target finufft_mex --parallel

          if [ "${RUNNER_OS}" != "macOS" ]; then
            cmake --build build --target cufinufft_mex --parallel
          fi

      - name: Run fullmathtest.m
        uses: matlab-actions/run-command@v2
        with:
          command: |
            addpath(genpath('matlab'));
            addpath(genpath('build'));
            fullmathtest

      - name: Package with CPack
        shell: bash
        run: cmake --build build --target package

      - uses: actions/upload-artifact@v4
        with:
          name: finufft-matlab-mex-${{ matrix.os }}
          path: |
            build/*.zip
            build/*.tar.gz
          if-no-files-found: error
