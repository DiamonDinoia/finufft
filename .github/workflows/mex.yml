# .github/workflows/build-matlab-mex.yml
name: cmake ci linux macos windows

on: [push, pull_request]

jobs:
  matlab-mex:
    name: ${{ matrix.os }} (MATLAB CPU MEX via DUCC0)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # Toolchain: CMake + Ninja (+ MSVC env on Windows)
      - name: Setup C++ toolchain
        uses: aminya/setup-cpp@v1.7.1
        with:
          cmake: true
          ninja: true
          vcvarsall: true

      # MATLAB on PATH for find_package(Matlab)/matlab_add_mex
      - name: Setup MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          products: MATLAB

      # macOS: OpenMP runtime and multi-target matrix
      - name: Install libomp (macOS) and set env
        if: runner.os == 'macOS'
        shell: bash
        run: |
          export HOMEBREW_NO_ANALYTICS=1 HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install libomp
          {
            echo "LDFLAGS=-L$(brew --prefix libomp)/lib"
            echo "CPPFLAGS=-I$(brew --prefix libomp)/include"
            echo "LIBRARY_PATH=$(brew --prefix libomp)/lib"
            echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib"
            echo "CMAKE_PREFIX_PATH=$(brew --prefix libomp)"
            echo "MAC_TARGETS=12.0 13.0"
          } >> "$GITHUB_ENV"

      # -------- Linux & Windows (unified) --------
      - name: Configure & Build (Linux/Windows, DUCC0)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DFINUFFT_USE_DUCC0=ON \
            -DFINUFFT_MATLAB_INSTALL=ON
          cmake --build build --target finufft_mex --parallel

      - name: Run fullmathtest.m (Linux/Windows)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          # locate built MEX folder and run test
          MEX_DIR="$(dirname "$(find build -type f -name 'finufft.mex*' -print -quit)")"
          matlab -batch "addpath('matlab'); addpath('${MEX_DIR}'); run('matlab/test/fullmathtest.m');"

      - name: Package (Linux/Windows) with CPack (TGZ)
        if: runner.os != 'macOS'
        shell: bash
        run: |
          mkdir -p dist
          os_tag=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          (cd build && cpack -G TGZ -B ../dist -D CPACK_PACKAGE_FILE_NAME="finufft-matlab-mex-${os_tag}")

      # -------- macOS (multi-target) --------
      - name: Configure & Build (macOS; DUCC0, multi-target)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          for tgt in ${MAC_TARGETS}; do
            bdir="build_mac_${tgt}"
            cmake -S . -B "${bdir}" -G Ninja \
              -DFINUFFT_USE_DUCC0=ON \
              -DFINUFFT_MATLAB_INSTALL=ON \
              -DCMAKE_OSX_DEPLOYMENT_TARGET="${tgt}"
            cmake --build "${bdir}" --target finufft_mex --parallel
          done

      - name: Run fullmathtest.m (macOS per target)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          for tgt in ${MAC_TARGETS}; do
            MEX_DIR="$(dirname "$(find "build_mac_${tgt}" -type f -name 'finufft.mex*' -print -quit)")"
            matlab -batch "addpath('matlab'); addpath('${MEX_DIR}'); run('matlab/test/fullmathtest.m');"
          done

      - name: Package (macOS) with CPack (TGZ per target)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          for tgt in ${MAC_TARGETS}; do
            (cd "build_mac_${tgt}" && cpack -G TGZ -B ../dist -D CPACK_PACKAGE_FILE_NAME="finufft-matlab-mex-macos-${tgt}")
          done

      # Upload archives
      - uses: actions/upload-artifact@v4
        with:
          name: finufft-matlab-mex-${{ matrix.os }}
          path: dist/**
          if-no-files-found: error
