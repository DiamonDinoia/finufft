name: Build MATLAB MEX

on: [push, pull_request]

jobs:
  matlab-mex:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: windows-latest
          - os: macos-14
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup C++ toolchain
        if: runner.os != 'Linux'
        uses: aminya/setup-cpp@v1.7.1
        with:
          cmake: true
          ninja: true
          vcvarsall: true

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: R2023b
          products: MATLAB
          cache: true

      - name: Install libomp (macOS) and set env
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          export HOMEBREW_NO_ANALYTICS=1 HOMEBREW_NO_INSTALL_CLEANUP=1
          brew install libomp
          {
            echo "LDFLAGS=-L$(brew --prefix libomp)/lib"
            echo "CPPFLAGS=-I$(brew --prefix libomp)/include"
            echo "LIBRARY_PATH=$(brew --prefix libomp)/lib"
            echo "DYLD_LIBRARY_PATH=$(brew --prefix libomp)/lib"
            echo "CMAKE_PREFIX_PATH=$(brew --prefix libomp)"
            echo "MAC_TARGETS=12.0 13.0"
          } >> "$GITHUB_ENV"

      # ---------- Linux (build inside manylinux2014: GCC 10 + glibc 2.17) ----------
      - name: Configure & Build (Linux in manylinux2014)
        if: runner.os == 'Linux'
        shell: bash
        env:
          MANYLINUX_IMAGE: quay.io/pypa/manylinux2014_x86_64
        run: |
          set -euo pipefail
          docker run --rm \
            -v "$PWD":/work -w /work \
            -v "${MATLAB_ROOT}:${MATLAB_ROOT}" -e "MATLAB_ROOT=${MATLAB_ROOT}" \
            "${MANYLINUX_IMAGE}" \
            /bin/bash -lc '
              set -euo pipefail
              # Use newer GCC
              source /opt/rh/devtoolset-10/enable
              # Get cmake & ninja
              export PATH="/opt/python/cp311-cp311/bin:$PATH"
              python -m pip install --upgrade pip
              python -m pip install cmake ninja
              cmake -S . -B build -G Ninja \
                -DFINUFFT_USE_CPU=ON \
                -DFINUFFT_USE_DUCC0=ON \
                -DFINUFFT_MATLAB_INSTALL=ON
              cmake --build build --target finufft_mex --parallel
            '
      # ---------- Windows ----------
      - name: Configure & Build (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          cmake -S . -B build -G Ninja \
            -DFINUFFT_USE_CPU=ON \
            -DFINUFFT_USE_DUCC0=ON \
            -DFINUFFT_MATLAB_INSTALL=ON
          cmake --build build --target finufft_mex --parallel

      # ---------- Tests ----------
      - name: Run fullmathtest.m (Linux/Windows)
        if: runner.os != 'macOS'
        uses: matlab-actions/run-command@v2
        with:
          command: |
            addpath(genpath('matlab'));
            addpath(genpath('build'));
            fullmathtest

      # ---------- Package ----------
      - name: Package (Linux via container)
        if: runner.os == 'Linux'
        shell: bash
        env:
          MANYLINUX_IMAGE: quay.io/pypa/manylinux2014_x86_64
        run: |
          set -euo pipefail
          docker run --rm \
            -v "$PWD":/work -w /work \
            "${MANYLINUX_IMAGE}" \
            /bin/bash -lc '
              set -euo pipefail
              source /opt/rh/devtoolset-10/enable
              export PATH="/opt/python/cp311-cp311/bin:$PATH"
              python -m pip install --upgrade pip
              python -m pip install cmake ninja
              cmake --build build --target package
              ls -l build/*.zip build/*.tar.gz 2>/dev/null || true
            '

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          cmake --build build --target package
          ls -l build/*.zip build/*.tar.gz 2>/dev/null || true

      # ---------- macOS (per deployment target) ----------
      - name: Configure & Build (macOS; multi-target)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          for tgt in ${MAC_TARGETS}; do
            bdir="build_mac_${tgt}"
            cmake -S . -B "${bdir}" -G Ninja \
              -DFINUFFT_USE_CPU=ON \
              -DFINUFFT_USE_DUCC0=ON \
              -DFINUFFT_MATLAB_INSTALL=ON \
              -DCMAKE_OSX_DEPLOYMENT_TARGET="${tgt}"
            cmake --build "${bdir}" --target finufft_mex --parallel
          done

      - name: Run fullmathtest.m (macOS per target)
        if: runner.os == 'macOS'
        uses: matlab-actions/run-command@v2
        with:
          command: |
            addpath(genpath('matlab'));
            targets = regexp(getenv('MAC_TARGETS'), '\s+', 'split');
            for i = 1:numel(targets)
              tgt = strtrim(targets{i});
              addpath(genpath(fullfile('build_mac_', tgt)));
              fullmathtest;
            end
            clear targets tgt;

      - name: Package (macOS per target)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          for tgt in ${MAC_TARGETS}; do
            cmake --build "build_mac_${tgt}" --target package
          done
          ls -l build_mac_*/finufft-matlab-mex-macos-*.tar.gz || true

      - uses: actions/upload-artifact@v4
        with:
          name: finufft-matlab-mex-${{ matrix.os }}
          path: |
            build/*.zip
            build/*.tar.gz
            build_mac_*/finufft-matlab-mex-macos-*.tar.gz
          if-no-files-found: error
