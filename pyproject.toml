[build-system]
requires = [
    "scikit-build-core >= 0.4.3",
    "cmake >= 3.19",
    "ninja >= 1.9.0",
]

build-backend = "scikit_build_core.build"

[project]
name = "finufft"
description = "Python bindings for the FINUFFT C++ library"
readme = "README.md"
requires-python = ">=3.8"
dependencies = ["numpy >= 1.12.0"]
dynamic = ["version"]

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.4"
# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

cmake.targets = ["finufft"]
cmake.define = {"FINUFFT_BUILD_PYTHON" = "ON", "FINUFFT_ENABLE_INSTALL" = "OFF"}

wheel.packages = ["python/finufft/finufft"]

# Indicate that we don't depend on the CPython API
wheel.py-api = "py3"

[tool.scikit-build.metadata.version]
provider = "scikit_build_core.metadata.regex"
input = "python/finufft/finufft/__init__.py"

[tool.cibuildwheel]
# Necessary to see build output from the actual compilation
build-verbosity = 1
# Not building for PyPy and musllinux for now.
skip = "pp* *musllinux"
test-requires = "pytest"
test-command = "pytest {project}/python/finufft/test"

[tool.cibuildwheel.linux]
archs = "x86_64"
before-all = "yum install -y fftw3-devel"

[tool.cibuildwheel.macos]
archs = "arm64"

[tool.cibuildwheel.windows]
archs = "amd64"
before-build = "pip install delvewheel"
# CIBW doesn't do vendoring of DLLs on Windows by default, so we have to
# install delvewheel and run it.
repair-wheel-command = "delvewheel repair -v --analyze-existing -w {dest_dir} {wheel}
